//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.1.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//


using System;
using HalconDotNet;

public partial class HDevelopExport
{
  public void image_display_datacode (HObject ho_SymbolXLDs, HTuple hv_ResultHandles, 
      HTuple hv_WindowHandle, HTuple hv_DecodedDataStrings, HTuple hv_DataCodeHandle)
  {




    // Local iconic variables 

    HObject ho_SymbolXLD=null;

    // Local control variables 

    HTuple hv_i = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Col = new HTuple(), hv_ModuleSize = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_SymbolXLD);
    //Display all symbols, the strings encoded in them, and the module size
    HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
    for (hv_i=0; (int)hv_i<=(int)((new HTuple(hv_ResultHandles.TupleLength()))-1); hv_i = (int)hv_i + 1)
    {
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_SymbolXLD.Dispose();
      HOperatorSet.SelectObj(ho_SymbolXLDs, out ho_SymbolXLD, hv_i+1);
      }
      HOperatorSet.DispObj(ho_SymbolXLD, hv_ExpDefaultWinHandle);
      hv_Row.Dispose();hv_Col.Dispose();
      HOperatorSet.GetContourXld(ho_SymbolXLD, out hv_Row, out hv_Col);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, hv_Row.TupleMin(), hv_Col.TupleMax()
          );
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.WriteString(hv_ExpDefaultWinHandle, hv_DecodedDataStrings.TupleSelect(
          hv_i));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ModuleSize.Dispose();
      HOperatorSet.GetDataCode2dResults(hv_DataCodeHandle, hv_ResultHandles.TupleSelect(
          hv_i), (new HTuple("module_height")).TupleConcat("module_width"), out hv_ModuleSize);
      }
      HOperatorSet.NewLine(hv_ExpDefaultWinHandle);
      //write_string (WindowHandle, 'module size = ' + ModuleSize[0] + 'x' +                                        ModuleSize[1])
    }
    ho_SymbolXLD.Dispose();

    hv_i.Dispose();
    hv_Row.Dispose();
    hv_Col.Dispose();
    hv_ModuleSize.Dispose();

    return;
  }

}
