//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.1.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//


using System;
using HalconDotNet;

public partial class HDevelopExport
{
  public void image_cali_map (HObject ho_Image, out HObject ho_TmpObj_RectifiedImage, 
      HTuple hv_CameraParameters, HTuple hv_CameraPose)
  {




      // Local iconic variables 

      HObject ho_TmpObj_RectificationMap;

      // Local control variables 

      HTuple hv_TmpCtrl_RectificationWidth = new HTuple();
      HTuple hv_TmpCtrl_RectificationPose = new HTuple();
      HTuple   hv_CameraParameters_COPY_INP_TMP = new HTuple(hv_CameraParameters);
      HTuple   hv_CameraPose_COPY_INP_TMP = new HTuple(hv_CameraPose);

      // Initialize local and output iconic variables 
      HOperatorSet.GenEmptyObj(out ho_TmpObj_RectifiedImage);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_RectificationMap);



    //* GEN CALIDATA
    //Calibration 01: Code generated by Calibration 01
    if ((int)((new HTuple(hv_CameraParameters_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
        new HTuple(hv_CameraPose_COPY_INP_TMP.TupleEqual(new HTuple())))) != 0)
    {
      hv_CameraParameters_COPY_INP_TMP.Dispose();
      hv_CameraParameters_COPY_INP_TMP = new HTuple();
      hv_CameraParameters_COPY_INP_TMP[0] = "area_scan_division";
      hv_CameraParameters_COPY_INP_TMP[1] = 0.0395393;
      hv_CameraParameters_COPY_INP_TMP[2] = 29.5225;
      hv_CameraParameters_COPY_INP_TMP[3] = 2.3103e-006;
      hv_CameraParameters_COPY_INP_TMP[4] = 2.4e-006;
      hv_CameraParameters_COPY_INP_TMP[5] = 1969.65;
      hv_CameraParameters_COPY_INP_TMP[6] = 5753.85;
      hv_CameraParameters_COPY_INP_TMP[7] = 4024;
      hv_CameraParameters_COPY_INP_TMP[8] = 3036;
      hv_CameraPose_COPY_INP_TMP.Dispose();
      hv_CameraPose_COPY_INP_TMP = new HTuple();
      hv_CameraPose_COPY_INP_TMP[0] = 0.00207285;
      hv_CameraPose_COPY_INP_TMP[1] = -0.111611;
      hv_CameraPose_COPY_INP_TMP[2] = 0.434522;
      hv_CameraPose_COPY_INP_TMP[3] = 13.3656;
      hv_CameraPose_COPY_INP_TMP[4] = 0.504334;
      hv_CameraPose_COPY_INP_TMP[5] = 90.2621;
      hv_CameraPose_COPY_INP_TMP[6] = 0;
    }




    //Calibration 01: Sample code generated by Calibration 01
    //Calibration 01: For demonstration purposes, we use the calibration
    //Calibration 01: plate itself as sample object.
    //Calibration 01: Therefore, we load the reference image
    //read_image (Image, 'C:/Users/zhang-sh/source/repos/qq840937370/Automation_CodeReading/file/image_02.png')
    //Calibration 01: Extract plate data from the image
    //TmpCtrl_PlateDescription := 'C:/Users/zhang-sh/source/repos/qq840937370/Automation_CodeReading/file/caltab_30mm.descr'
    //TmpCtrl_FindCalObjParNames := ['gap_tolerance','alpha','skip_find_caltab']
    //TmpCtrl_FindCalObjParValues := [1,1,'false']
    //Calibration 01: Create calibration model for managing calibration data
    //create_calib_data ('calibration_object', 1, 1, CalibHandle)
    //set_calib_data_cam_param (CalibHandle, 0, [], CameraParameters)
    //set_calib_data_calib_object (CalibHandle, 0, TmpCtrl_PlateDescription)
    //find_calib_object (Image, CalibHandle, 0, 0, 0, TmpCtrl_FindCalObjParNames, TmpCtrl_FindCalObjParValues)
    //get_calib_data_observ_points (CalibHandle, 0, 0, 0, TmpCtrl_MarkRows, TmpCtrl_MarkColumns, TmpCtrl_Ind, CameraPose)
    //Calibration 01: Using the calibration plate as test object, the marks actually
    //Calibration 01: lie above the corrected measurement plane. Therefore, we 'uncorrect'
    //Calibration 01: the plane of measurement by the plate thickness here.
    //set_origin_pose (CameraPose, 0.0, 0.0, 0, CameraPose)


    //read_image (Image, 'C:/Users/zhang-sh/source/repos/qq840937370/Automation_CodeReading/file/Images/Inv/InvV1 (4).jpg')
    //Calibration 01: **********************************************************
    //Calibration 01: Sample Task: Image Rectification
    //Calibration 01: **********************************************************
    //Calibration 01: Choose the desired width of the visible area in world coordinates [mm]
    hv_TmpCtrl_RectificationWidth.Dispose();
    hv_TmpCtrl_RectificationWidth = 75;
    //Calibration 01: Convert to [m]
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    {
    HTuple 
      ExpTmpLocalVar_TmpCtrl_RectificationWidth = hv_TmpCtrl_RectificationWidth/1000.0;
    hv_TmpCtrl_RectificationWidth.Dispose();
    hv_TmpCtrl_RectificationWidth = ExpTmpLocalVar_TmpCtrl_RectificationWidth;
    }
    }
    //Calibration 01: Adjust origin so the plate is roughly centered
    //* ATTENTION 参数从-0.5 -0.4 改成了-0.5 -0.6
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_TmpCtrl_RectificationPose.Dispose();
    HOperatorSet.SetOriginPose(hv_CameraPose_COPY_INP_TMP, -0.5*hv_TmpCtrl_RectificationWidth, 
        -0.6*hv_TmpCtrl_RectificationWidth, 0, out hv_TmpCtrl_RectificationPose);
    }
    //Calibration 01: Generate the rectification map
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_TmpObj_RectificationMap.Dispose();
    HOperatorSet.GenImageToWorldPlaneMap(out ho_TmpObj_RectificationMap, hv_CameraParameters_COPY_INP_TMP, 
        hv_TmpCtrl_RectificationPose, 4024, 3036, 3036, 4024, hv_TmpCtrl_RectificationWidth/3036, 
        "bilinear");
    }
    //gen_image_to_world_plane_map (TmpObj_RectificationMap, CameraParameters, TmpCtrl_RectificationPose, 4024, 3036, 3036, 4024, 0.8*TmpCtrl_RectificationWidth / 3036, 'bilinear')
    //Calibration 01: Now, images can be rectified using the rectification map
    ho_TmpObj_RectifiedImage.Dispose();
    HOperatorSet.MapImage(ho_Image, ho_TmpObj_RectificationMap, out ho_TmpObj_RectifiedImage
        );
    //stop ()
    ho_TmpObj_RectificationMap.Dispose();

    hv_CameraParameters_COPY_INP_TMP.Dispose();
    hv_CameraPose_COPY_INP_TMP.Dispose();
    hv_TmpCtrl_RectificationWidth.Dispose();
    hv_TmpCtrl_RectificationPose.Dispose();

    return;
  }

}
