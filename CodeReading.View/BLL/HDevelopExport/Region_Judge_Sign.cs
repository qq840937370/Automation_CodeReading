//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.1.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//


using System;
using HalconDotNet;

public partial class HDevelopExport
{
  public void region_judge_sign (HObject ho_Image4, out HObject ho_EDGE, HTuple hv_HeadSignScale, 
      HTuple hv_HeadSignRow, HTuple hv_HeadSignCol, HTuple hv_HeadPhi, HTuple hv_WindowHandle, 
      out HTuple hv_sign)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ROI_0, ho_RoiSign1, ho_RoiSign2;
    HObject ho_RoiSign3, ho_RoiSign4, ho_RoiSign, ho_GrayImage;
    HObject ho_ObjectSelected=null, ho_ImageReduced=null, ho_Edges=null;

    // Local control variables 

    HTuple hv_HeadWidth = new HTuple(), hv_HeadHeight = new HTuple();
    HTuple hv_RoiSignScale = new HTuple(), hv_RoiSignWidth = new HTuple();
    HTuple hv_RoiSignHeight = new HTuple(), hv_Rows = new HTuple();
    HTuple hv_Columns = new HTuple(), hv_Index = new HTuple();
    HTuple hv_Length = new HTuple(), hv_Length1 = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_EDGE);
    HOperatorSet.GenEmptyObj(out ho_ROI_0);
    HOperatorSet.GenEmptyObj(out ho_RoiSign1);
    HOperatorSet.GenEmptyObj(out ho_RoiSign2);
    HOperatorSet.GenEmptyObj(out ho_RoiSign3);
    HOperatorSet.GenEmptyObj(out ho_RoiSign4);
    HOperatorSet.GenEmptyObj(out ho_RoiSign);
    HOperatorSet.GenEmptyObj(out ho_GrayImage);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Edges);
    hv_sign = new HTuple();
    //----Package
    hv_HeadWidth.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_HeadWidth = hv_HeadSignScale*1647;
    }
    hv_HeadHeight.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_HeadHeight = hv_HeadSignScale*73;
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_ROI_0.Dispose();
    HOperatorSet.GenRectangle2(out ho_ROI_0, hv_HeadSignRow, hv_HeadSignCol, hv_HeadPhi, 
        hv_HeadWidth/2, hv_HeadHeight/2);
    }

    //* RoiSign
    hv_RoiSignScale.Dispose();
    hv_RoiSignScale = 0.7;
    hv_RoiSignWidth.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_RoiSignWidth = (hv_RoiSignScale*hv_HeadWidth)/4;
    }
    hv_RoiSignHeight.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_RoiSignHeight = hv_RoiSignScale*hv_HeadHeight;
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_RoiSign1.Dispose();
    HOperatorSet.GenRectangle2(out ho_RoiSign1, (1*hv_HeadSignRow)+(1.75*hv_HeadHeight), 
        hv_HeadSignCol-(0.375*hv_HeadWidth), (new HTuple(0)).TupleRad(), hv_RoiSignWidth/2, 
        hv_RoiSignHeight/2);
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_RoiSign2.Dispose();
    HOperatorSet.GenRectangle2(out ho_RoiSign2, (1*hv_HeadSignRow)+(1.75*hv_HeadHeight), 
        hv_HeadSignCol-(0.15*hv_HeadWidth), (new HTuple(0)).TupleRad(), hv_RoiSignWidth/2, 
        hv_RoiSignHeight/2);
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_RoiSign3.Dispose();
    HOperatorSet.GenRectangle2(out ho_RoiSign3, (1*hv_HeadSignRow)+(1.75*hv_HeadHeight), 
        hv_HeadSignCol+(0.175*hv_HeadWidth), (new HTuple(0)).TupleRad(), hv_RoiSignWidth/2, 
        hv_RoiSignHeight/2);
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_RoiSign4.Dispose();
    HOperatorSet.GenRectangle2(out ho_RoiSign4, (1*hv_HeadSignRow)+(1.75*hv_HeadHeight), 
        hv_HeadSignCol+(0.375*hv_HeadWidth), (new HTuple(0)).TupleRad(), hv_RoiSignWidth/2, 
        hv_RoiSignHeight/2);
    }
    ho_RoiSign.Dispose();
    HOperatorSet.GenEmptyObj(out ho_RoiSign);
    {
    HObject ExpTmpOutVar_0;
    HOperatorSet.ConcatObj(ho_RoiSign1, ho_RoiSign, out ExpTmpOutVar_0);
    ho_RoiSign.Dispose();
    ho_RoiSign = ExpTmpOutVar_0;
    }
    {
    HObject ExpTmpOutVar_0;
    HOperatorSet.ConcatObj(ho_RoiSign2, ho_RoiSign, out ExpTmpOutVar_0);
    ho_RoiSign.Dispose();
    ho_RoiSign = ExpTmpOutVar_0;
    }
    {
    HObject ExpTmpOutVar_0;
    HOperatorSet.ConcatObj(ho_RoiSign3, ho_RoiSign, out ExpTmpOutVar_0);
    ho_RoiSign.Dispose();
    ho_RoiSign = ExpTmpOutVar_0;
    }
    {
    HObject ExpTmpOutVar_0;
    HOperatorSet.ConcatObj(ho_RoiSign4, ho_RoiSign, out ExpTmpOutVar_0);
    ho_RoiSign.Dispose();
    ho_RoiSign = ExpTmpOutVar_0;
    }

    //** Porg
    //* Pre
    ho_GrayImage.Dispose();
    HOperatorSet.Rgb1ToGray(ho_Image4, out ho_GrayImage);
    hv_Rows.Dispose();hv_Columns.Dispose();
    HOperatorSet.GetRegionConvex(ho_ROI_0, out hv_Rows, out hv_Columns);
    ho_EDGE.Dispose();
    HOperatorSet.GenEmptyObj(out ho_EDGE);

    //* Judgement
    for (hv_Index=1; (int)hv_Index<=4; hv_Index = (int)hv_Index + 1)
    {
      ho_ObjectSelected.Dispose();
      HOperatorSet.SelectObj(ho_RoiSign, out ho_ObjectSelected, hv_Index);
      //截取对应区域图片
      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_Image4, ho_ObjectSelected, out ho_ImageReduced
          );
      //区域图片映射为轮廓
      ho_Edges.Dispose();
      HOperatorSet.EdgesSubPix(ho_ImageReduced, out ho_Edges, "canny", 1, 20, 40);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ConcatObj(ho_Edges, ho_EDGE, out ExpTmpOutVar_0);
      ho_EDGE.Dispose();
      ho_EDGE = ExpTmpOutVar_0;
      }
      //得到轮廓长度数组
      hv_Length.Dispose();
      HOperatorSet.LengthXld(ho_Edges, out hv_Length);
      //云团数目大于五则有签字
      hv_Length1.Dispose();
      HOperatorSet.TupleLength(hv_Length, out hv_Length1);
      if ((int)(new HTuple(hv_Length1.TupleGreater(5))) != 0)
      {
        if (hv_sign == null)
          hv_sign = new HTuple();
        hv_sign[hv_Index-1] = 1;
      }
      else
      {
        if (hv_sign == null)
          hv_sign = new HTuple();
        hv_sign[hv_Index-1] = 0;
      }
    }

    //** Display

    //disp_obj (EDGE, WindowHandle)
    //stop ()
    ho_ROI_0.Dispose();
    ho_RoiSign1.Dispose();
    ho_RoiSign2.Dispose();
    ho_RoiSign3.Dispose();
    ho_RoiSign4.Dispose();
    ho_RoiSign.Dispose();
    ho_GrayImage.Dispose();
    ho_ObjectSelected.Dispose();
    ho_ImageReduced.Dispose();
    ho_Edges.Dispose();

    hv_HeadWidth.Dispose();
    hv_HeadHeight.Dispose();
    hv_RoiSignScale.Dispose();
    hv_RoiSignWidth.Dispose();
    hv_RoiSignHeight.Dispose();
    hv_Rows.Dispose();
    hv_Columns.Dispose();
    hv_Index.Dispose();
    hv_Length.Dispose();
    hv_Length1.Dispose();

    return;
  }

}
