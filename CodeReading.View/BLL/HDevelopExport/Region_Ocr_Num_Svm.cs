//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.1.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//


using System;
using HalconDotNet;

public partial class HDevelopExport
{
  public void region_ocr_num_svm (HObject ho_Image, HObject ho_ROI_OCR_01_0, HTuple hv_TextModel, 
      HTuple hv_OcrHandle, out HTuple hv_SymbolNames_OCR_01_0, out HTuple hv_Ocr_Split)
  {




      // Local iconic variables 

      HObject ho_TmpObj_Mono, ho_TmpObj_MonoReduced_OCR_01_0;
      HObject ho_TmpObj_Domain, ho_TmpObj_DomainExpanded, ho_TmpObj_DomainTransformedRaw;
      HObject ho_TmpObj_DomainTransformed, ho_TmpObj_ImageTransformed;
      HObject ho_TmpObj_ImageTransformedExpanded, ho_TmpObj_ImageTransformedReduced;
      HObject ho_Symbols_OCR_01_0;

      // Local control variables 

      HTuple hv_TmpCtrl_MatrixIdentity = new HTuple();
      HTuple hv_TmpCtrl_ClipRegion = new HTuple(), hv_TmpCtrl_Row1 = new HTuple();
      HTuple hv_TmpCtrl_Col1 = new HTuple(), hv_TmpCtrl_Row2 = new HTuple();
      HTuple hv_TmpCtrl_Col2 = new HTuple(), hv_TmpCtrl_MatrixTranslation = new HTuple();
      HTuple hv_TmpCtrl_MatrixComposite = new HTuple(), hv_TmpCtrl_ResultHandle_OCR_01_0 = new HTuple();
      HTuple   hv_OcrHandle_COPY_INP_TMP = new HTuple(hv_OcrHandle);
      HTuple   hv_TextModel_COPY_INP_TMP = new HTuple(hv_TextModel);

      // Initialize local and output iconic variables 
      HOperatorSet.GenEmptyObj(out ho_TmpObj_Mono);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_MonoReduced_OCR_01_0);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_Domain);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_DomainExpanded);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_DomainTransformedRaw);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_DomainTransformed);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_ImageTransformed);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_ImageTransformedExpanded);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_ImageTransformedReduced);
      HOperatorSet.GenEmptyObj(out ho_Symbols_OCR_01_0);
      hv_SymbolNames_OCR_01_0 = new HTuple();
      hv_Ocr_Split = new HTuple();
    //OCR 01: Code generated by OCR 01
    //OCR 01:
    //OCR 01: Prepare text model
    //OCR 01:
    if ((int)(new HTuple(hv_TextModel_COPY_INP_TMP.TupleEqual(new HTuple()))) != 0)
    {
      hv_TextModel_COPY_INP_TMP.Dispose();
      HOperatorSet.CreateTextModelReader("manual", new HTuple(), out hv_TextModel_COPY_INP_TMP);
      HOperatorSet.SetTextModelParam(hv_TextModel_COPY_INP_TMP, "manual_stroke_width", 
          5);
      HOperatorSet.SetTextModelParam(hv_TextModel_COPY_INP_TMP, "manual_fragment_size_min", 
          5);
      HOperatorSet.SetTextModelParam(hv_TextModel_COPY_INP_TMP, "manual_eliminate_border_blobs", 
          "true");
      HOperatorSet.SetTextModelParam(hv_TextModel_COPY_INP_TMP, "manual_base_line_tolerance", 
          0.2);
      HOperatorSet.SetTextModelParam(hv_TextModel_COPY_INP_TMP, "manual_max_line_num", 
          2);
    }

    //OCR 01:
    //OCR 01: Load classifier
    //OCR 01:
    if ((int)(new HTuple(hv_OcrHandle_COPY_INP_TMP.TupleEqual(new HTuple()))) != 0)
    {
      hv_OcrHandle_COPY_INP_TMP.Dispose();
      HOperatorSet.ReadOcrClassSvm("C:/Users/zhang-sh/source/repos/qq840937370/Automation_CodeReading/file/NumOcrTrainBlck.osc", 
          out hv_OcrHandle_COPY_INP_TMP);
    }


    //OCR 01:
    //OCR 01: Extract symbol regions (segmentation step)
    //OCR 01: Only consider first channel for color images
    ho_TmpObj_Mono.Dispose();
    HOperatorSet.AccessChannel(ho_Image, out ho_TmpObj_Mono, 1);
    ho_TmpObj_MonoReduced_OCR_01_0.Dispose();
    HOperatorSet.ReduceDomain(ho_TmpObj_Mono, ho_ROI_OCR_01_0, out ho_TmpObj_MonoReduced_OCR_01_0
        );
    //OCR 01:
    //OCR 01: Orientation Correction (for consistent border and domain
    //OCR 01: handling, this is always applied, even with no rotation)
    //OCR 01:
    hv_TmpCtrl_MatrixIdentity.Dispose();
    HOperatorSet.HomMat2dIdentity(out hv_TmpCtrl_MatrixIdentity);
    //OCR 01: Apply transformation to image and domain
    ho_TmpObj_Domain.Dispose();
    HOperatorSet.GetDomain(ho_TmpObj_MonoReduced_OCR_01_0, out ho_TmpObj_Domain);
    hv_TmpCtrl_ClipRegion.Dispose();
    HOperatorSet.GetSystem("clip_region", out hv_TmpCtrl_ClipRegion);
    HOperatorSet.SetSystem("clip_region", "false");
    ho_TmpObj_DomainExpanded.Dispose();
    HOperatorSet.DilationCircle(ho_TmpObj_Domain, out ho_TmpObj_DomainExpanded, 25);
    ho_TmpObj_DomainTransformedRaw.Dispose();
    HOperatorSet.AffineTransRegion(ho_TmpObj_DomainExpanded, out ho_TmpObj_DomainTransformedRaw, 
        hv_TmpCtrl_MatrixIdentity, "true");
    hv_TmpCtrl_Row1.Dispose();hv_TmpCtrl_Col1.Dispose();hv_TmpCtrl_Row2.Dispose();hv_TmpCtrl_Col2.Dispose();
    HOperatorSet.SmallestRectangle1(ho_TmpObj_DomainTransformedRaw, out hv_TmpCtrl_Row1, 
        out hv_TmpCtrl_Col1, out hv_TmpCtrl_Row2, out hv_TmpCtrl_Col2);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_TmpCtrl_MatrixTranslation.Dispose();
    HOperatorSet.HomMat2dTranslate(hv_TmpCtrl_MatrixIdentity, -hv_TmpCtrl_Row1, -hv_TmpCtrl_Col1, 
        out hv_TmpCtrl_MatrixTranslation);
    }
    hv_TmpCtrl_MatrixComposite.Dispose();
    HOperatorSet.HomMat2dCompose(hv_TmpCtrl_MatrixTranslation, hv_TmpCtrl_MatrixIdentity, 
        out hv_TmpCtrl_MatrixComposite);
    ho_TmpObj_DomainTransformed.Dispose();
    HOperatorSet.AffineTransRegion(ho_TmpObj_Domain, out ho_TmpObj_DomainTransformed, 
        hv_TmpCtrl_MatrixComposite, "true");
    ho_TmpObj_ImageTransformed.Dispose();
    HOperatorSet.AffineTransImage(ho_TmpObj_MonoReduced_OCR_01_0, out ho_TmpObj_ImageTransformed, 
        hv_TmpCtrl_MatrixComposite, "constant", "true");
    ho_TmpObj_DomainExpanded.Dispose();
    HOperatorSet.DilationCircle(ho_TmpObj_Domain, out ho_TmpObj_DomainExpanded, 25);
    ho_TmpObj_ImageTransformedExpanded.Dispose();
    HOperatorSet.ExpandDomainGray(ho_TmpObj_ImageTransformed, out ho_TmpObj_ImageTransformedExpanded, 
        25);
    ho_TmpObj_ImageTransformedReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_TmpObj_ImageTransformed, ho_TmpObj_DomainTransformed, 
        out ho_TmpObj_ImageTransformedReduced);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_TmpObj_MonoReduced_OCR_01_0.Dispose();
    HOperatorSet.CropPart(ho_TmpObj_ImageTransformedReduced, out ho_TmpObj_MonoReduced_OCR_01_0, 
        0, 0, (hv_TmpCtrl_Col2-hv_TmpCtrl_Col1)+1, (hv_TmpCtrl_Row2-hv_TmpCtrl_Row1)+1);
    }
    HOperatorSet.SetSystem("clip_region", hv_TmpCtrl_ClipRegion);
    hv_TmpCtrl_ResultHandle_OCR_01_0.Dispose();
    HOperatorSet.FindText(ho_TmpObj_MonoReduced_OCR_01_0, hv_TextModel_COPY_INP_TMP, 
        out hv_TmpCtrl_ResultHandle_OCR_01_0);

    //OCR 01:
    //OCR 01: Read text (classification step)
    ho_Symbols_OCR_01_0.Dispose();
    HOperatorSet.GetTextObject(out ho_Symbols_OCR_01_0, hv_TmpCtrl_ResultHandle_OCR_01_0, 
        "manual_all_lines");
    //dev_display (TmpObj_MonoReduced_OCR_01_0)
    //dev_set_draw ('fill')
    //dev_set_colored (3)
    //dev_display (Symbols_OCR_01_0)
    hv_SymbolNames_OCR_01_0.Dispose();
    HOperatorSet.DoOcrMultiClassSvm(ho_Symbols_OCR_01_0, ho_TmpObj_MonoReduced_OCR_01_0, 
        hv_OcrHandle_COPY_INP_TMP, out hv_SymbolNames_OCR_01_0);
    hv_Ocr_Split.Dispose();
    ocr_split(hv_SymbolNames_OCR_01_0, out hv_Ocr_Split);
    ho_TmpObj_Mono.Dispose();
    ho_TmpObj_MonoReduced_OCR_01_0.Dispose();
    ho_TmpObj_Domain.Dispose();
    ho_TmpObj_DomainExpanded.Dispose();
    ho_TmpObj_DomainTransformedRaw.Dispose();
    ho_TmpObj_DomainTransformed.Dispose();
    ho_TmpObj_ImageTransformed.Dispose();
    ho_TmpObj_ImageTransformedExpanded.Dispose();
    ho_TmpObj_ImageTransformedReduced.Dispose();
    ho_Symbols_OCR_01_0.Dispose();

    hv_OcrHandle_COPY_INP_TMP.Dispose();
    hv_TextModel_COPY_INP_TMP.Dispose();
    hv_TmpCtrl_MatrixIdentity.Dispose();
    hv_TmpCtrl_ClipRegion.Dispose();
    hv_TmpCtrl_Row1.Dispose();
    hv_TmpCtrl_Col1.Dispose();
    hv_TmpCtrl_Row2.Dispose();
    hv_TmpCtrl_Col2.Dispose();
    hv_TmpCtrl_MatrixTranslation.Dispose();
    hv_TmpCtrl_MatrixComposite.Dispose();
    hv_TmpCtrl_ResultHandle_OCR_01_0.Dispose();

    return;
  }

}
