using CodeReading.Entity.MainForm;
using HalconDotNet;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeReading.View.BLL.HalconHelper
{
    public class HalconHelpers
    {
        // 相机句柄
        HTuple hv_AcqHandle = null;
        HDevelopExport hDevelopExport = new HDevelopExport();
        /// <summary>
        /// 自动识图假方法
        /// </summary>
        /// <param name="rtaHalconWin"> halcon控件-实时影像</param>
        /// <param name="icsHalconWin"> halcon控件-处理结果</param>
        /// <param name="usedInfo"> 返回的信息类 </param>
        private void AutomaticMapRecognitionMethod(HTuple rtaHalconWin, HTuple icsHalconWin, out UsedInfo usedInfo)
        {
            // 返回值初始化
            #region
            // 释放相机句柄
            HOperatorSet.CloseAllFramegrabbers();
            // 连接相机
            HOperatorSet.OpenFramegrabber("GigEVision2", 0, 0, 0, 0, 0, 0, "progressive",
        -1, "default", -1, "false", "default", "c42f90f2b7fa_Hikvision_MVCE12010GM",
        0, -1, out hv_AcqHandle);
            HObject ho_Image = null;
            HOperatorSet.GenEmptyObj(out ho_Image);

            ho_Image.Dispose();
            HOperatorSet.GrabImage(out ho_Image, hv_AcqHandle);
            #endregion
            //***
            //** DISPLAY
            //* DISPLAY INIT
            hDevelopExport.dev_update_off();
            //dev_close_window(...);
            //dev_open_window(...);

            //***
            //** LOOP
            //Image Acquisition 01: Code generated by Image Acquisition 01
            hv_AcqHandle.Dispose();
            HOperatorSet.OpenFramegrabber("GigEVision2", 0, 0, 0, 0, 0, 0, "progressive",
                -1, "default", -1, "false", "default", "c42f90f2b7fa_Hikvision_MVCE12010GM",
                0, -1, out hv_AcqHandle);
            while ((int)(1) != 0)
            {
                ho_Image.Dispose();
                HOperatorSet.GrabImage(out ho_Image, hv_AcqHandle);
                //read_image (Image, 'C:/Users/zhang-sh/source/repos/qq840937370/Automation_CodeReading/file/1SHIL.bmp')

                try
                {
                    {
                        HObject ExpTmpOutVar_0;
                        hDevelopExport.image_cali_map(ho_Image, out ExpTmpOutVar_0, new HTuple(), new HTuple());
                        ho_Image.Dispose();
                        ho_Image = ExpTmpOutVar_0;
                    }
                    //dev_display (Image)

                    //***
                    //** Class
                    hv_DecodedDataStrings.Dispose();
                    hDevelopExport.image_class_mia(ho_Image,  hv_WindowHandle, out hv_DecodedDataStrings);


                    //UsedInfo usedInfo  = new    UsedInfo();

                    //*** Progress
                    //** 1SHIL
                    if ((int)(new HTuple(hv_DecodedDataStrings.TupleEqual("1SHIL"))) != 0)
                    {
                        hDevelopExport.image_prog_1SHIL(ho_Image, hv_WindowHandle, out UsedInfo usedInfo1);

                        //** 2HNCL
                    }
                    else if ((int)(new HTuple(hv_DecodedDataStrings.TupleEqual(
                        "2HNCL"))) != 0)
                    {
                        hDevelopExport.image_prog_2HNCL(ho_Image, hv_WindowHandle, out UsedInfo usedInfo1);
                        //** 3CWDL
                    }
                    else
                    {
                        hDevelopExport.image_prog_3CWDL(ho_Image, hv_WindowHandle, out UsedInfo usedInfo, out UsedInfo usedInfo);

                    }

                    //stop ()
                }
                // catch (Exception) 
                catch (HalconException HDevExpDefaultException1)
                {
                    HDevExpDefaultException1.ToHTuple(out hv_Exception);
                }

            }
        }
    }
}
